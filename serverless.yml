service: serverless-wolox

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'develop'}
  environment:
    accountId: ${aws:accountId}
    SHIPMENT_ARN: arn:aws:lambda:${self:provider.region}:${self:provider.environment.accountId}:function:${self:service}-${self:provider.stage}-createShipment
  lambdaHashingVersion: 20201221
  eventBridge:
    useCloudFormation: true


package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - '!.git/**'
    - '!.serverless/**'
    - '!aws-sdk'
    - '!resources/**'

functions:
  GetClients:
    handler: functions/get_clients/app.handler
    environment:
      CLIENTS_TABLE: 'clients_table'
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
        - dynamodb:Scan
        Resource: !GetAtt ClientsTable.Arn
    events:
      - http:
          path: clients
          method: get
          cors: true

  GetShipments:
    handler: functions/get_shipments/app.handler
    environment:
      SHIPMENT_TABLE: 'shipments_table'
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
        - dynamodb:Scan
        Resource: !GetAtt ShipmentsTable.Arn
    events:
      - http:
          path: shipments
          method: get
          cors: true

  CreateClient:
    handler: functions/create_client/app.handler
    environment:
      CLIENTS_TABLE: 'clients_table'
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        Resource: !GetAtt ClientsTable.Arn
      - Effect: 'Allow'
        Action:
        - events:PutEvents
        Resource: 'arn:aws:events:us-east-1:550008309007:event-bus/default'
    events:
      - http:
          path: clients
          method: post
          cors: true
          request:
            schemas:
              application/json:
                schema: ${file(schemas/create_client.json)}
                name: ClientCreateModel
                description: 'Validation model for Creating Clients'

  SendGift:
    handler: functions/send_gift/app.handler
    environment:
      CLIENTS_TABLE: 'clients_table'
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
        - dynamodb:UpdateItem
        Resource: !GetAtt ClientsTable.Arn
      - Effect: 'Allow'
        Action:
        - sqs:ReceiveMessage
        Resource: !GetAtt ClientRoleQueue.Arn
    events:
      - sqs:
          arn: !GetAtt ClientRoleQueue.Arn   
      - stream:
          type: dynamodb
          arn:  !GetAtt ClientsTable.StreamArn

  CreateShipment:
    handler: functions/create_shipment/app.handler
    environment:
      SHIPMENT_TABLE: 'shipments_table'
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
        - dynamodb:Query 
        - dynamodb:PutItem 
        - dynamodb:UpdateItem 
        Resource: !GetAtt ShipmentsTable.Arn
    events:
      - eventBridge:
        pattern:
          source:
            - 'shipment_rule'
          detail-type:
            - 'Shipment'   
      - stream:
          type: dynamodb
          arn:  !GetAtt ClientsTable.StreamArn      

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function